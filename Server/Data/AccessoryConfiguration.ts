import {AccessoryType} from "../HomeKit/AccessoryType";
import * as hap from "hap-nodejs";
import {Log} from "../Log";
import {Remote} from "./Remote";
/**
 * Created by Robert on 12/01/2017.
 */


/**
 * This is the big universal json that is used by the iOS-App to create a valid accessory configuration.
 *
 * The main purpose is to automatically create the right accessory depending on the used fields.
 * The published Accessory uses this configuration to react on the actions of HomeKit in the defined matter.
 *
 * Only a little part of the fields are used for a single accessory. The undefined fields are not serialized by the json-serializer (thanks god :D)
 */
export class AccessoryConfiguration {

    //the next available port for the accessory (each accessory is its own server so this is necessary)
    public static nextPort: number;

    //required by all accessories
    public name: string; //unique across all accessories
    public typeName: string; //The service name in the HAP-nodejs library
    public usedStates: number; //ranging from -2 to 3 depending on the used service

    //optional info about the accessory
    public manufacturer: string;
    public model: string;
    public serial: string;

    //required by sensor-service-types
    public sensorValue: any; //the default value
    public sensorPin: number; //the pin on the arduino board
    public analogReference: number; //can be set if the minimum voltage is not GND

    //required by stateful accessories
    public firstState: boolean;
    public secondState: number;
    public thirdState: boolean;
    public secondStateMaxValue: number;

    //the defined signal ids of the accessory.
    public firstStateOnSignals: Remote;
    public firstStateOffSignals: Remote;
    public secondStateIncreaseSignals: Remote;
    public secondStateDecreaseSignals: Remote;
    public thirdStateOnSignals: Remote;
    public thirdStateOffSignals: Remote;

    //autogenerated values needed by every accessory
    public type: AccessoryType;
    public uuid: string;
    public port: number;
    public username: string;

    private constructor() {
        //private to only allow creation by static methods.
    }

    /**
     * Creates a string representation of a configuration-object.
     * It skips the type to prevent serializing a function.
     *
     * @param config The config to serialize
     * @returns {string} The serialized object
     */
    public static stringify(config: AccessoryConfiguration): string {
        let backup = config.type;
        config.type = undefined;
        let json = JSON.stringify(config);
        config.type = backup;
        return json;
    }

    /**
     * Called to recreate a configuration which existed before.
     * Used by the Database to load the configuration from disk.
     *
     * @param jsonString
     * @returns {AccessoryConfiguration}
     */
    public static recreate(jsonString: string): AccessoryConfiguration {
        let json = JSON.parse(jsonString);
        let config = <AccessoryConfiguration> json;
        config.type = AccessoryType.getTypeForName(config.typeName);
        return config;
    }

    /**
     * Called to create a new configuration.
     * @param jsonString
     * @returns {AccessoryConfiguration}
     */
    public static create(jsonString: any): AccessoryConfiguration {
        let json = JSON.parse(jsonString);
        let config: AccessoryConfiguration = <AccessoryConfiguration>json;

        config.type = AccessoryType.getTypeForName(config.typeName);
        config.port = AccessoryConfiguration.nextPort;
        config.username = AccessoryConfiguration.generateUsername();
        config.uuid = hap.uuid.generate(config.name + config.username);

        Log.info(this, "AccessoryConfiguration created");
        return config;
    }

    public static update(oldConfig: AccessoryConfiguration, newConfig: AccessoryConfiguration) {
        oldConfig.firstStateOnSignals = newConfig.firstStateOnSignals;
        oldConfig.firstStateOffSignals = newConfig.firstStateOffSignals;
        oldConfig.secondStateIncreaseSignals = newConfig.secondStateIncreaseSignals;
        oldConfig.secondStateDecreaseSignals = newConfig.secondStateDecreaseSignals;
        oldConfig.thirdStateOnSignals = newConfig.thirdStateOnSignals;
        oldConfig.thirdStateOffSignals = newConfig.thirdStateOffSignals;
    }

    /**
     * Generates a unique mac-address for each accessory.
     * @returns {string} The generated MAC
     */
    private static generateUsername(): string {
        let mac = "0" + new Date().getTime().toString(16);

        for (let i = 2; i < mac.length - 1; i += 3) {
            mac = mac.substr(0, i) + ":" + mac.substr(i);
        }
        return mac;
    }
}